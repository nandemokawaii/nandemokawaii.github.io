{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rheap/Documents/GitHub/nandemokawaii.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { ref } from 'vue';\nexport var getItems = function getItems(a) {\n  var items = ref([]);\n  var error = ref(null);\n\n  var load = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var data;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch('http://localhost:3000/items');\n\n            case 3:\n              data = _context.sent;\n\n              if (data.ok) {\n                _context.next = 6;\n                break;\n              }\n\n              throw Error('no data available');\n\n            case 6:\n              _context.next = 8;\n              return data.json();\n\n            case 8:\n              items.value = _context.sent;\n              console.log(\"getItems\");\n              _context.next = 16;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              error.value = _context.t0.message;\n              console.log(error.value);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 12]]);\n    }));\n\n    return function load() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  load();\n  return {\n    items: items,\n    error: error,\n    load: load\n  };\n};\nexport var getItemsByCategory = function getItemsByCategory(a) {\n  var items = ref([]);\n  var error = ref(null);\n\n  var load = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var data;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch('http://localhost:3000/items?category=' + a);\n\n            case 3:\n              data = _context2.sent;\n\n              if (data.ok) {\n                _context2.next = 6;\n                break;\n              }\n\n              throw Error('no data available');\n\n            case 6:\n              _context2.next = 8;\n              return data.json();\n\n            case 8:\n              items.value = _context2.sent;\n              console.log(\"with category\" + a);\n              _context2.next = 16;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](0);\n              error.value = _context2.t0.message;\n              console.log(error.value);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 12]]);\n    }));\n\n    return function load() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  load();\n  return {\n    items: items,\n    error: error,\n    load: load\n  };\n};","map":{"version":3,"sources":["C:/Users/rheap/Documents/GitHub/nandemokawaii.github.io/src/composables/getItems.js"],"names":["ref","getItems","a","items","error","load","fetch","data","ok","Error","json","value","console","log","message","getItemsByCategory"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,KAApB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAO;AAC3B,MAAMC,KAAK,GAAGH,GAAG,CAAC,EAAD,CAAjB;AACA,MAAMI,KAAK,GAAGJ,GAAG,CAAC,IAAD,CAAjB;;AAEA,MAAMK,IAAI;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEYC,KAAK,CAAC,6BAAD,CAFjB;;AAAA;AAEDC,cAAAA,IAFC;;AAAA,kBAGDA,IAAI,CAACC,EAHJ;AAAA;AAAA;AAAA;;AAAA,oBAIKC,KAAK,CAAC,mBAAD,CAJV;;AAAA;AAAA;AAAA,qBAMeF,IAAI,CAACG,IAAL,EANf;;AAAA;AAMLP,cAAAA,KAAK,CAACQ,KAND;AAOLC,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAPK;AAAA;;AAAA;AAAA;AAAA;AAULT,cAAAA,KAAK,CAACO,KAAN,GAAc,YAAIG,OAAlB;AACAF,cAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACO,KAAlB;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJN,IAAI;AAAA;AAAA;AAAA,KAAV;;AAeAA,EAAAA,IAAI;AAEJ,SAAO;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,KAAK,EAALA,KAAT;AAAgBC,IAAAA,IAAI,EAAJA;AAAhB,GAAP;AACH,CAtBM;AAwBP,OAAO,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB,CAACb,CAAD,EAAO;AACrC,MAAMC,KAAK,GAAGH,GAAG,CAAC,EAAD,CAAjB;AACA,MAAMI,KAAK,GAAGJ,GAAG,CAAC,IAAD,CAAjB;;AAEA,MAAMK,IAAI;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEgBC,KAAK,CAAC,0CAA0CJ,CAA3C,CAFrB;;AAAA;AAEGK,cAAAA,IAFH;;AAAA,kBAGGA,IAAI,CAACC,EAHR;AAAA;AAAA;AAAA;;AAAA,oBAISC,KAAK,CAAC,mBAAD,CAJd;;AAAA;AAAA;AAAA,qBAMmBF,IAAI,CAACG,IAAL,EANnB;;AAAA;AAMDP,cAAAA,KAAK,CAACQ,KANL;AAODC,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBX,CAA9B;AAPC;AAAA;;AAAA;AAAA;AAAA;AAWLE,cAAAA,KAAK,CAACO,KAAN,GAAc,aAAIG,OAAlB;AACAF,cAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACO,KAAlB;;AAZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJN,IAAI;AAAA;AAAA;AAAA,KAAV;;AAgBAA,EAAAA,IAAI;AAEJ,SAAO;AAAEF,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,KAAK,EAALA,KAAT;AAAgBC,IAAAA,IAAI,EAAJA;AAAhB,GAAP;AACH,CAvBM","sourcesContent":["import { ref } from 'vue'\r\n\r\nexport const getItems = (a) => {\r\n    const items = ref([])\r\n    const error = ref(null)\r\n\r\n    const load = async () => {\r\n        try{\r\n            let data = await fetch('http://localhost:3000/items')\r\n            if(!data.ok){\r\n                throw Error('no data available')\r\n            }\r\n            items.value = await data.json()\r\n            console.log(\"getItems\")\r\n        }\r\n        catch(err) {\r\n            error.value = err.message\r\n            console.log(error.value);\r\n        }\r\n    }\r\n\r\n    load()\r\n\r\n    return { items, error, load }\r\n}\r\n\r\nexport const getItemsByCategory = (a) => {\r\n    const items = ref([])\r\n    const error = ref(null)\r\n\r\n    const load = async () => {\r\n        try{\r\n                let data = await fetch('http://localhost:3000/items?category=' + a)\r\n                if(!data.ok){\r\n                    throw Error('no data available')\r\n                }\r\n                items.value = await data.json()\r\n                console.log(\"with category\" + a)\r\n              \r\n        }\r\n        catch(err) {\r\n            error.value = err.message\r\n            console.log(error.value);\r\n        }\r\n    }\r\n\r\n    load()\r\n\r\n    return { items, error, load }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}